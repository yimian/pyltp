.. _install-label:

LTP 的下载和安装
================

如果你想要使用LTP，必须拥有两部分内容

* LTP项目文件
* LTP模型文件

你可以从以下链接获得最新的LTP项目源码。

* `Github项目托管 <https://github.com/HIT-SCIR/ltp/releases>`_

如果你是windows用户，你也可以跳过从源代码编译的环节，从以下链接获得编译好的二进制文件

* `Github项目托管 <https://github.com/HIT-SCIR/ltp/releases>`_

你可以从以下链接获得LTP的模型文件

* `百度云 <http://pan.baidu.com/share/link?shareid=1988562907&uk=2738088569>`_ 当前模型版本3.3.1

依赖：CMake
------------

LTP使用编译工具CMake构建项目。在安装LTP之前，你需要首先安装CMake。CMake可以在 `CMake项目官网 <http://www.cmake.org>`_ 。如果你是Windows用户，请下载CMake的二进制安装包；如果你是Linux，Mac OS或Cygwin的用户，可以通过编译源码的方式安装CMake，当然，你也可以使用Linux的软件源来安装。

在 Windows (MSVC) 下编译
------------------------

第一步：构建 VC Project
~~~~~~~~~~~~~~~~~~~~~~

在项目文件夹下新建一个名为 :file:`build` 的目录，打开CMake Gui，在source code中填入项目目录，在binaries中填入 :file:`build` 目录。然后Configure -> Generate。

.. image:: http://ir.hit.edu.cn/~yjliu/image/2013-7-12-cmake-win-setup.png

或者在命令行build目录下运行::

    cmake ..

第二步：编译
~~~~~~~~~~~~

构建后得到ALL_BUILD、RUN_TESTS、ZERO_CHECK三个VC Project。使用VS打开ALL_BUILD项目，选择Release [#f1]_ 方式构建项目。


在 Linux, macOS 和 Cygwin 下编译
----------------------------

Linux、Mac OSX和Cygwin的用户，可以直接在项目根目录下使用命令进行编译::

    ./configure
    make

编译结果说明
--------------

编译成功后，会在 :file:`bin` 目录下生成以下二进制程序：

+----------------------------+------------------------------+
| 程序名                     | 说明                         |
+============================+==============================+
| :file:`ltp_test`           | LTP主程序                    |
+----------------------------+------------------------------+
| :file:`ltp_server` [#f2]_  | LTP Server                   |
+----------------------------+------------------------------+

在 :file:`bin/examples` 目录下生成以下二进制程序:

+----------------------------+------------------------------+
| 程序名                     | 说明                         |
+============================+==============================+
| :file:`cws_cmdline`        | 分词模块命令行程序           |
+----------------------------+------------------------------+
| :file:`pos_cmdline`        | 词性标注模块命令行程序       |
+----------------------------+------------------------------+
| :file:`ner_cmdline`        | 命名实体识别模块命令行程序   |
+----------------------------+------------------------------+
| :file:`par_cmdline`        | 依存句法分析模块命令行程序   |
+----------------------------+------------------------------+

在 :file:`lib` 目录下生成以下静态链接库 [#f3]_ :

+----------------------------+------------------------------+
| 程序名                     | 说明                         |
+============================+==============================+
| :file:`splitsnt.lib`       | 分句lib库                    |
+----------------------------+------------------------------+
| :file:`segmentor.lib`      | 分词lib库                    |
+----------------------------+------------------------------+
| :file:`postagger.lib`      | 词性标注lib库                |
+----------------------------+------------------------------+
| :file:`parser.lib`         | 依存句法分析lib库            |
+----------------------------+------------------------------+
| :file:`ner.lib`            | 命名实体识别lib库            |
+----------------------------+------------------------------+
| :file:`srl.lib`            | 语义角色标注lib库            |
+----------------------------+------------------------------+

在 :file:`tools/train` 目录下生成以下二进制程序:

+----------------------------+------------------------------+
| 程序名                     | 说明                         |
+============================+==============================+
| :file:`otcws`              | 分词训练和测试套件           |
+----------------------------+------------------------------+
| :file:`otpos`              | 词性标注训练和测试套件       |
+----------------------------+------------------------------+
| :file:`otner`              | 命名实体识别训练和测试套件   |
+----------------------------+------------------------------+
| :file:`nndepparser`        | 依存句法分析训练和测试套件   |
+----------------------------+------------------------------+
| :file:`lgsrl`              | 语义角色标注训练和测试套件   |
+----------------------------+------------------------------+



.. rubric:: 注

.. [#f1] :file:`boost::multi_array` 与VS2010不兼容的bug已经在3.1.0中得到修复，3.1.x及以上版本已经可以使用Debug方式构建，但出于效率考虑，仍旧建议使用Release方式构建。
.. [#f2] 在window版本中 :file:`ltp_server` 、:file:`Maxent` 、:file:`SRLExtract` 、:file:`SRLGetInstance` 并不被编译。
.. [#f3] window下产生的静态库的后缀是.lib，linux下产生的静态库的后缀是.a
